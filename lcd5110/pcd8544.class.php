<?php

define('OUTPUT', 1);
define('HIGH', 1);
define('LOW', 0);

define('BLACK', 1);
define('WHITE', 0);

define('LCDWIDTH', 84);
define('LCDHEIGHT', 48);

define('PCD8544_POWERDOWN', 0x04);
define('PCD8544_ENTRYMODE', 0x02);
define('PCD8544_EXTENDEDINSTRUCTION', 0x01);

define('PCD8544_DISPLAYBLANK', 0x0);
define('PCD8544_DISPLAYNORMAL', 0x4);
define('PCD8544_DISPLAYALLON', 0x1);
define('PCD8544_DISPLAYINVERTED', 0x5);

// H = 0
define('PCD8544_FUNCTIONSET', 0x20);
define('PCD8544_DISPLAYCONTROL', 0x08);
define('PCD8544_SETYADDR', 0x40);
define('PCD8544_SETXADDR', 0x80);

// H = 1
define('PCD8544_SETTEMP', 0x04);
define('PCD8544_SETBIAS', 0x10);
define('PCD8544_SETVOP', 0x80);

define('CLKCONST_1', 8000);
define('CLKCONST_2', 400); // 400 is a good tested value for Raspberry Pi

// keywords
define('LSBFIRST', 0);
define('MSBFIRST', 1);

define('enablePartialUpdate', 1);

/**
 * class pcdstruct
 */
class pcdstruct
{
    // {{{ members start
    
    public $_din;
    public $_sclk;
    public $_dc;
    public $_rst;
    public $_cs;

    public $cursor_x;
    public $cursor_y;
    public $textsize;
    public $textcolor;
    public $contrast;
    // the memory buffer for the LCD
    public $pcd8544_buffer; 

    // }}} members end
}

class pcd8544
{
    // {{{ members start

    private static $doinit = 0;
    private static $xUpdateMin;
    private static $xUpdateMax;
    private static $yUpdateMin;
    private static $yUpdateMax;
    
    /**
     * 字体映射
     */
    private static $font = [
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
		0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
		0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
		0x18, 0x3C, 0x7E, 0x3C, 0x18,
		0x1C, 0x57, 0x7D, 0x57, 0x1C,
		0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
		0x00, 0x18, 0x3C, 0x18, 0x00,
		0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
		0x00, 0x18, 0x24, 0x18, 0x00,
		0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
		0x30, 0x48, 0x3A, 0x06, 0x0E,
		0x26, 0x29, 0x79, 0x29, 0x26,
		0x40, 0x7F, 0x05, 0x05, 0x07,
		0x40, 0x7F, 0x05, 0x25, 0x3F,
		0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
		0x7F, 0x3E, 0x1C, 0x1C, 0x08,
		0x08, 0x1C, 0x1C, 0x3E, 0x7F,
		0x14, 0x22, 0x7F, 0x22, 0x14,
		0x5F, 0x5F, 0x00, 0x5F, 0x5F,
		0x06, 0x09, 0x7F, 0x01, 0x7F,
		0x00, 0x66, 0x89, 0x95, 0x6A,
		0x60, 0x60, 0x60, 0x60, 0x60,
		0x94, 0xA2, 0xFF, 0xA2, 0x94,
		0x08, 0x04, 0x7E, 0x04, 0x08,
		0x10, 0x20, 0x7E, 0x20, 0x10,
		0x08, 0x08, 0x2A, 0x1C, 0x08,
		0x08, 0x1C, 0x2A, 0x08, 0x08,
		0x1E, 0x10, 0x10, 0x10, 0x10,
		0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
		0x30, 0x38, 0x3E, 0x38, 0x30,
		0x06, 0x0E, 0x3E, 0x0E, 0x06,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x5F, 0x00, 0x00,
		0x00, 0x07, 0x00, 0x07, 0x00,
		0x14, 0x7F, 0x14, 0x7F, 0x14,
		0x24, 0x2A, 0x7F, 0x2A, 0x12,
		0x23, 0x13, 0x08, 0x64, 0x62,
		0x36, 0x49, 0x56, 0x20, 0x50,
		0x00, 0x08, 0x07, 0x03, 0x00,
		0x00, 0x1C, 0x22, 0x41, 0x00,
		0x00, 0x41, 0x22, 0x1C, 0x00,
		0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
		0x08, 0x08, 0x3E, 0x08, 0x08,
		0x00, 0x80, 0x70, 0x30, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08,
		0x00, 0x00, 0x60, 0x60, 0x00,
		0x20, 0x10, 0x08, 0x04, 0x02,
		0x3E, 0x51, 0x49, 0x45, 0x3E,
		0x00, 0x42, 0x7F, 0x40, 0x00,
		0x72, 0x49, 0x49, 0x49, 0x46,
		0x21, 0x41, 0x49, 0x4D, 0x33,
		0x18, 0x14, 0x12, 0x7F, 0x10,
		0x27, 0x45, 0x45, 0x45, 0x39,
		0x3C, 0x4A, 0x49, 0x49, 0x31,
		0x41, 0x21, 0x11, 0x09, 0x07,
		0x36, 0x49, 0x49, 0x49, 0x36,
		0x46, 0x49, 0x49, 0x29, 0x1E,
		0x00, 0x00, 0x14, 0x00, 0x00,
		0x00, 0x40, 0x34, 0x00, 0x00,
		0x00, 0x08, 0x14, 0x22, 0x41,
		0x14, 0x14, 0x14, 0x14, 0x14,
		0x00, 0x41, 0x22, 0x14, 0x08,
		0x02, 0x01, 0x59, 0x09, 0x06,
		0x3E, 0x41, 0x5D, 0x59, 0x4E,
		0x7C, 0x12, 0x11, 0x12, 0x7C,
		0x7F, 0x49, 0x49, 0x49, 0x36,
		0x3E, 0x41, 0x41, 0x41, 0x22,
		0x7F, 0x41, 0x41, 0x41, 0x3E,
		0x7F, 0x49, 0x49, 0x49, 0x41,
		0x7F, 0x09, 0x09, 0x09, 0x01,
		0x3E, 0x41, 0x41, 0x51, 0x73,
		0x7F, 0x08, 0x08, 0x08, 0x7F,
		0x00, 0x41, 0x7F, 0x41, 0x00,
		0x20, 0x40, 0x41, 0x3F, 0x01,
		0x7F, 0x08, 0x14, 0x22, 0x41,
		0x7F, 0x40, 0x40, 0x40, 0x40,
		0x7F, 0x02, 0x1C, 0x02, 0x7F,
		0x7F, 0x04, 0x08, 0x10, 0x7F,
		0x3E, 0x41, 0x41, 0x41, 0x3E,
		0x7F, 0x09, 0x09, 0x09, 0x06,
		0x3E, 0x41, 0x51, 0x21, 0x5E,
		0x7F, 0x09, 0x19, 0x29, 0x46,
		0x26, 0x49, 0x49, 0x49, 0x32,
		0x03, 0x01, 0x7F, 0x01, 0x03,
		0x3F, 0x40, 0x40, 0x40, 0x3F,
		0x1F, 0x20, 0x40, 0x20, 0x1F,
		0x3F, 0x40, 0x38, 0x40, 0x3F,
		0x63, 0x14, 0x08, 0x14, 0x63,
		0x03, 0x04, 0x78, 0x04, 0x03,
		0x61, 0x59, 0x49, 0x4D, 0x43,
		0x00, 0x7F, 0x41, 0x41, 0x41,
		0x02, 0x04, 0x08, 0x10, 0x20,
		0x00, 0x41, 0x41, 0x41, 0x7F,
		0x04, 0x02, 0x01, 0x02, 0x04,
		0x40, 0x40, 0x40, 0x40, 0x40,
		0x00, 0x03, 0x07, 0x08, 0x00,
		0x20, 0x54, 0x54, 0x78, 0x40,
		0x7F, 0x28, 0x44, 0x44, 0x38,
		0x38, 0x44, 0x44, 0x44, 0x28,
		0x38, 0x44, 0x44, 0x28, 0x7F,
		0x38, 0x54, 0x54, 0x54, 0x18,
		0x00, 0x08, 0x7E, 0x09, 0x02,
		0x18, 0xA4, 0xA4, 0x9C, 0x78,
		0x7F, 0x08, 0x04, 0x04, 0x78,
		0x00, 0x44, 0x7D, 0x40, 0x00,
		0x20, 0x40, 0x40, 0x3D, 0x00,
		0x7F, 0x10, 0x28, 0x44, 0x00,
		0x00, 0x41, 0x7F, 0x40, 0x00,
		0x7C, 0x04, 0x78, 0x04, 0x78,
		0x7C, 0x08, 0x04, 0x04, 0x78,
		0x38, 0x44, 0x44, 0x44, 0x38,
		0xFC, 0x18, 0x24, 0x24, 0x18,
		0x18, 0x24, 0x24, 0x18, 0xFC,
		0x7C, 0x08, 0x04, 0x04, 0x08,
		0x48, 0x54, 0x54, 0x54, 0x24,
		0x04, 0x04, 0x3F, 0x44, 0x24,
		0x3C, 0x40, 0x40, 0x20, 0x7C,
		0x1C, 0x20, 0x40, 0x20, 0x1C,
		0x3C, 0x40, 0x30, 0x40, 0x3C,
		0x44, 0x28, 0x10, 0x28, 0x44,
		0x4C, 0x90, 0x90, 0x90, 0x7C,
		0x44, 0x64, 0x54, 0x4C, 0x44,
		0x00, 0x08, 0x36, 0x41, 0x00,
		0x00, 0x00, 0x77, 0x00, 0x00,
		0x00, 0x41, 0x36, 0x08, 0x00,
		0x02, 0x01, 0x02, 0x04, 0x02,
		0x3C, 0x26, 0x23, 0x26, 0x3C,
		0x1E, 0xA1, 0xA1, 0x61, 0x12,
		0x3A, 0x40, 0x40, 0x20, 0x7A,
		0x38, 0x54, 0x54, 0x55, 0x59,
		0x21, 0x55, 0x55, 0x79, 0x41,
		0x21, 0x54, 0x54, 0x78, 0x41,
		0x21, 0x55, 0x54, 0x78, 0x40,
		0x20, 0x54, 0x55, 0x79, 0x40,
		0x0C, 0x1E, 0x52, 0x72, 0x12,
		0x39, 0x55, 0x55, 0x55, 0x59,
		0x39, 0x54, 0x54, 0x54, 0x59,
		0x39, 0x55, 0x54, 0x54, 0x58,
		0x00, 0x00, 0x45, 0x7C, 0x41,
		0x00, 0x02, 0x45, 0x7D, 0x42,
		0x00, 0x01, 0x45, 0x7C, 0x40,
		0xF0, 0x29, 0x24, 0x29, 0xF0,
		0xF0, 0x28, 0x25, 0x28, 0xF0,
		0x7C, 0x54, 0x55, 0x45, 0x00,
		0x20, 0x54, 0x54, 0x7C, 0x54,
		0x7C, 0x0A, 0x09, 0x7F, 0x49,
		0x32, 0x49, 0x49, 0x49, 0x32,
		0x32, 0x48, 0x48, 0x48, 0x32,
		0x32, 0x4A, 0x48, 0x48, 0x30,
		0x3A, 0x41, 0x41, 0x21, 0x7A,
		0x3A, 0x42, 0x40, 0x20, 0x78,
		0x00, 0x9D, 0xA0, 0xA0, 0x7D,
		0x39, 0x44, 0x44, 0x44, 0x39,
		0x3D, 0x40, 0x40, 0x40, 0x3D,
		0x3C, 0x24, 0xFF, 0x24, 0x24,
		0x48, 0x7E, 0x49, 0x43, 0x66,
		0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
		0xFF, 0x09, 0x29, 0xF6, 0x20,
		0xC0, 0x88, 0x7E, 0x09, 0x03,
		0x20, 0x54, 0x54, 0x79, 0x41,
		0x00, 0x00, 0x44, 0x7D, 0x41,
		0x30, 0x48, 0x48, 0x4A, 0x32,
		0x38, 0x40, 0x40, 0x22, 0x7A,
		0x00, 0x7A, 0x0A, 0x0A, 0x72,
		0x7D, 0x0D, 0x19, 0x31, 0x7D,
		0x26, 0x29, 0x29, 0x2F, 0x28,
		0x26, 0x29, 0x29, 0x29, 0x26,
		0x30, 0x48, 0x4D, 0x40, 0x20,
		0x38, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x38,
		0x2F, 0x10, 0xC8, 0xAC, 0xBA,
		0x2F, 0x10, 0x28, 0x34, 0xFA,
		0x00, 0x00, 0x7B, 0x00, 0x00,
		0x08, 0x14, 0x2A, 0x14, 0x22,
		0x22, 0x14, 0x2A, 0x14, 0x08,
		0xAA, 0x00, 0x55, 0x00, 0xAA,
		0xAA, 0x55, 0xAA, 0x55, 0xAA,
		0x00, 0x00, 0x00, 0xFF, 0x00,
		0x10, 0x10, 0x10, 0xFF, 0x00,
		0x14, 0x14, 0x14, 0xFF, 0x00,
		0x10, 0x10, 0xFF, 0x00, 0xFF,
		0x10, 0x10, 0xF0, 0x10, 0xF0,
		0x14, 0x14, 0x14, 0xFC, 0x00,
		0x14, 0x14, 0xF7, 0x00, 0xFF,
		0x00, 0x00, 0xFF, 0x00, 0xFF,
		0x14, 0x14, 0xF4, 0x04, 0xFC,
		0x14, 0x14, 0x17, 0x10, 0x1F,
		0x10, 0x10, 0x1F, 0x10, 0x1F,
		0x14, 0x14, 0x14, 0x1F, 0x00,
		0x10, 0x10, 0x10, 0xF0, 0x00,
		0x00, 0x00, 0x00, 0x1F, 0x10,
		0x10, 0x10, 0x10, 0x1F, 0x10,
		0x10, 0x10, 0x10, 0xF0, 0x10,
		0x00, 0x00, 0x00, 0xFF, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0xFF, 0x10,
		0x00, 0x00, 0x00, 0xFF, 0x14,
		0x00, 0x00, 0xFF, 0x00, 0xFF,
		0x00, 0x00, 0x1F, 0x10, 0x17,
		0x00, 0x00, 0xFC, 0x04, 0xF4,
		0x14, 0x14, 0x17, 0x10, 0x17,
		0x14, 0x14, 0xF4, 0x04, 0xF4,
		0x00, 0x00, 0xFF, 0x00, 0xF7,
		0x14, 0x14, 0x14, 0x14, 0x14,
		0x14, 0x14, 0xF7, 0x00, 0xF7,
		0x14, 0x14, 0x14, 0x17, 0x14,
		0x10, 0x10, 0x1F, 0x10, 0x1F,
		0x14, 0x14, 0x14, 0xF4, 0x14,
		0x10, 0x10, 0xF0, 0x10, 0xF0,
		0x00, 0x00, 0x1F, 0x10, 0x1F,
		0x00, 0x00, 0x00, 0x1F, 0x14,
		0x00, 0x00, 0x00, 0xFC, 0x14,
		0x00, 0x00, 0xF0, 0x10, 0xF0,
		0x10, 0x10, 0xFF, 0x10, 0xFF,
		0x14, 0x14, 0x14, 0xFF, 0x14,
		0x10, 0x10, 0x10, 0x1F, 0x00,
		0x00, 0x00, 0x00, 0xF0, 0x10,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
		0x38, 0x44, 0x44, 0x38, 0x44,
		0x7C, 0x2A, 0x2A, 0x3E, 0x14,
		0x7E, 0x02, 0x02, 0x06, 0x06,
		0x02, 0x7E, 0x02, 0x7E, 0x02,
		0x63, 0x55, 0x49, 0x41, 0x63,
		0x38, 0x44, 0x44, 0x3C, 0x04,
		0x40, 0x7E, 0x20, 0x1E, 0x20,
		0x06, 0x02, 0x7E, 0x02, 0x02,
		0x99, 0xA5, 0xE7, 0xA5, 0x99,
		0x1C, 0x2A, 0x49, 0x2A, 0x1C,
		0x4C, 0x72, 0x01, 0x72, 0x4C,
		0x30, 0x4A, 0x4D, 0x4D, 0x30,
		0x30, 0x48, 0x78, 0x48, 0x30,
		0xBC, 0x62, 0x5A, 0x46, 0x3D,
		0x3E, 0x49, 0x49, 0x49, 0x00,
		0x7E, 0x01, 0x01, 0x01, 0x7E,
		0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
		0x44, 0x44, 0x5F, 0x44, 0x44,
		0x40, 0x51, 0x4A, 0x44, 0x40,
		0x40, 0x44, 0x4A, 0x51, 0x40,
		0x00, 0x00, 0xFF, 0x01, 0x03,
		0xE0, 0x80, 0xFF, 0x00, 0x00,
		0x08, 0x08, 0x6B, 0x6B, 0x08,
		0x36, 0x12, 0x36, 0x24, 0x36,
		0x06, 0x0F, 0x09, 0x0F, 0x06,
		0x00, 0x00, 0x18, 0x18, 0x00,
		0x00, 0x00, 0x10, 0x10, 0x00,
		0x30, 0x40, 0xFF, 0x01, 0x01,
		0x00, 0x1F, 0x01, 0x01, 0x1E,
		0x00, 0x19, 0x1D, 0x17, 0x12,
		0x00, 0x3C, 0x3C, 0x3C, 0x3C,
		0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    
    /**
     * logo映射
     */
    private static $pi_logo = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0010 (16) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xFC, 0xAE, 0x0E, 0x0E, 0x06, 0x0E, 0x06,   // 0x0020 (32) pixels
        0xCE, 0x86, 0x8E, 0x0E, 0x0E, 0x1C, 0xB8, 0xF0, 0xF8, 0x78, 0x38, 0x1E, 0x0E, 0x8E, 0x8E, 0xC6,   // 0x0030 (48) pixels
        0x0E, 0x06, 0x0E, 0x06, 0x0E, 0x9E, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0040 (64) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0050 (80) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0060 (96) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0xFE,   // 0x0070 (112) pixels
        0xF8, 0xF0, 0x60, 0x60, 0xE0, 0xE1, 0xE3, 0xF7, 0x7E, 0x3E, 0x1E, 0x1F, 0x1F, 0x1F, 0x3E, 0x7E,   // 0x0080 (128) pixels
        0xFB, 0xF3, 0xE1, 0xE0, 0x60, 0x70, 0xF0, 0xF8, 0xBE, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00,   // 0x0090 (144) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00A0 (160) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00B0 (176) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0,   // 0x00C0 (192) pixels
        0xE0, 0xFC, 0xFE, 0xFF, 0xF3, 0x38, 0x38, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x3C, 0x38, 0xF8,   // 0x00D0 (208) pixels
        0xF8, 0x38, 0x3C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x38, 0x38, 0xF3, 0xFF, 0xFF, 0xF8, 0xE0,   // 0x00E0 (224) pixels
        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00F0 (240) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0100 (256) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0110 (272) pixels
        0x00, 0x7F, 0xFF, 0xE7, 0xC3, 0xC1, 0xE0, 0xFF, 0xFF, 0x78, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0,   // 0x0120 (288) pixels
        0x60, 0x78, 0x38, 0x3F, 0x3F, 0x38, 0x38, 0x60, 0x60, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xF8, 0x7F,   // 0x0130 (304) pixels
        0xFF, 0xE0, 0xC1, 0xC3, 0xE7, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0140 (320) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0150 (336) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0160 (352) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x7F, 0xFF, 0xF1, 0xE0, 0xC0, 0x80, 0x01,   // 0x0170 (368) pixels
        0x03, 0x9F, 0xFF, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xFF, 0x9F,   // 0x0180 (384) pixels
        0x03, 0x01, 0x80, 0xC0, 0xE0, 0xF1, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0190 (400) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01A0 (416) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01B0 (432) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,   // 0x01C0 (448) pixels
        0x03, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3B, 0x71, 0x60, 0x60, 0x60, 0x60, 0x60, 0x71,   // 0x01D0 (464) pixels
        0x3B, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01E0 (480) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01F0 (496) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        ];

    // }}} members end
    // {{{ functions start

    // {{{ private function _bv()

    /**
     * 左移
     */
    private function _bv($bit)
    {
        return 0x1 << $bit; 
    }

    // }}}
    // {{{ private function swap()

    /**
     * 交换
     */
    private function swap(&$a, &$b)
    {
        $t = $a;
        $a = $b;
        $b = $t;
    }

    // }}}
    // {{{ public function my_setpixel()
    
    public function my_setpixel(pcdstruct $pcd ,$x, $y, $color)
    {
        if (($x >= LCDWIDTH) || ($y >= LCDHEIGHT))
            return;
        // x is which column
        if ($color)
            $pcd->pcd8544_buffer[$x+ intval($y/8)*LCDWIDTH] |= $this->_bv($y%8);
        else
            $pcd->pcd8544_buffer[$x+ intval($y/8)*LCDWIDTH] &= ~($this->_bv($y%8));
    }

    // }}}
    // {{{ public function LCDshowLogo()
    
    public function LCDshowLogo(pcdstruct $pcd)
    {
        for ($i=0; $i<LCDWIDTH*LCDHEIGHT/8; $i++)
        {
            $pcd->pcd8544_buffer[$i] = self::$pi_logo[$i];
        }
        $this->LCDdisplay($pcd);
    }

    // }}}
    // {{{ public function updateBoundingBox()
    
    public function updateBoundingBox($xmin, $ymin, $xmax, $ymax) 
    {
        if (defined('enablePartialUpdate')) {
            if ($xmin < self::$xUpdateMin) self::$xUpdateMin = $xmin;
            if ($xmax > self::$xUpdateMax) self::$xUpdateMax = $xmax;
            if ($ymin < self::$yUpdateMin) self::$yUpdateMin = $ymin;
            if ($ymax > self::$yUpdateMax) self::$yUpdateMax = $ymax;
        }
    }

    // }}}
    // {{{ public function LCDNew()

    public function LCDNew(&$pcd)
    {
        $pcd = new pcdstruct;
    }

    // }}}
    // {{{ public function LCDInit()

    public function LCDInit(pcdstruct $pcd, $SCLK, $DIN, $DC, $CS, $RST, $contrast)
    {
        $pcd->_din = $DIN;
        $pcd->_sclk = $SCLK;
        $pcd->_dc = $DC;
        $pcd->_rst = $RST;
        $pcd->_cs = $CS;
        $pcd->cursor_x = $pcd->cursor_y = 0;
        $pcd->textsize = 1;
        $pcd->textcolor = BLACK;

        pinMode($pcd->_cs, OUTPUT);

        // toggle RST low to reset; CS low so it'll listen to us
        if ($pcd->_cs > 0)
            digitalWrite($pcd->_cs, LOW);

        if(!self::$doinit){
            // set pin directions
            pinMode($pcd->_din, OUTPUT);
            pinMode($pcd->_sclk, OUTPUT);
            pinMode($pcd->_dc, OUTPUT);
            pinMode($pcd->_rst, OUTPUT);

            digitalWrite($pcd->_rst, LOW);
            $this->_delay_ms(500);
            digitalWrite($pcd->_rst, HIGH);
            self::$doinit = 1;
        }

        // get into the EXTENDED mode!
       $this->LCDcommand($pcd,PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION );

        // LCD bias select (4 is optimal?)
        $this->LCDcommand($pcd,PCD8544_SETBIAS | 0x4);

        // set VOP
        if ($pcd->contrast > 0x7f)
            $pcd->contrast = 0x7f;

        $this->LCDcommand($pcd, PCD8544_SETVOP | $contrast); // Experimentally determined

        // normal mode
        $this->LCDcommand($pcd,PCD8544_FUNCTIONSET);

        // Set display to Normal
        $this->LCDcommand($pcd,PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);

        // set up a bounding box for screen updates
        $this->updateBoundingBox(0, 0, LCDWIDTH-1, LCDHEIGHT-1);

        digitalWrite($pcd->_cs,HIGH);

    }

    // }}}
    // {{{ public function LCDdrawbitmap()

    public function LCDdrawbitmap(pcdstruct $pcd, $x, $y, $bitmap, $w, $h, $color)
    {
        for ($j=0; $j<$h; $j++)
        {
            for ($i=0; $i<$w; $i++)
            {
                if ($bitmap[$i + intval($j/8)*$w] & $this->_bv($j%8))
                {
                    $this->my_setpixel($pcd, $x+$i, $y+$j, $color);
                }
            }
        }
        $this->updateBoundingBox($x, $y, $x+$w, $y+$h);
    }

    // }}}
    // {{{ public function LCDdrawstring()

    public function LCDdrawstring(pcdstruct $pcd, $x, $y, $c)
    {
        $pcd->cursor_x = $x;
        $pcd->cursor_y = $y;
        for($i=0; $i<strlen($c); $i++)
        {
            $this->LCDwrite($pcd, $c[$i]);
        }
    }

    // }}}
    // {{{ public function LCDdrawchar()

    public function LCDdrawchar(pcdstruct $pcd, $x, $y, $c)
    {
        if ($y >= LCDHEIGHT) return;
        if (($x+5) >= LCDWIDTH) return;
        for ($i=0; $i<5; $i++)
        {
            $d = self::$font[ord($c)*5+$i];
            for ($j=0; $j<8; $j++)
            {
                if ($d & $this->_bv($j))
                {
                    $this->my_setpixel($pcd, $x+$i, $y+$j, $pcd->textcolor);
                }
                else
                {
                    $this->my_setpixel($pcd, $x+$i, $y+$j, !$pcd->textcolor);
                }
            }
        }

        for ($j=0; $j<8; $j++)
        {
            $this->my_setpixel($pcd, $x+5, $y+$j, !$pcd->textcolor);
        }
        $this->updateBoundingBox($x, $y, $x+5, $y + 8);
    }

    // }}}
    // {{{ public function LCDwrite()

    public function LCDwrite(pcdstruct $pcd, $c)
    {
        if ($c == "\n")
        {
            $pcd->cursor_y += $pcd->textsize*8;
            $pcd->cursor_x = 0;
        }
        else if ($c == "\r")
        {
            // skip em
        }
        else
        {
            $this->LCDdrawchar($pcd, $pcd->cursor_x, $pcd->cursor_y, $c);
            $pcd->cursor_x += $pcd->textsize*6;
            if ($pcd->cursor_x >= (LCDWIDTH-5))
            {
                $pcd->cursor_x = 0;
                $pcd->cursor_y+=8;
            }
            if ($pcd->cursor_y >= LCDHEIGHT)
                $pcd->cursor_y = 0;
        }
    }

    // }}}
    // {{{ public function LCDsetCursor()

    public function LCDsetCursor(pcdstruct $pcd, $x, $y)
    {
        $pcd->cursor_x = $x;
        $pcd->cursor_y = $y;
    }

    // }}}
    // {{{ public function LCDdrawline()

    public function LCDdrawline(pcdstruct $pcd, $x0, $y0, $x1, $y1, $color)
    {
        $steep = abs($y1 - $y0) > abs($x1 - $x0);
        if ($steep)
        {
            $this->swap($x0, $y0);
            $this->swap($x1, $y1);
        }

        if ($x0 > $x1)
        {
            $this->swap($x0, $x1);
            $this->swap($y0, $y1);
        }

        // much faster to put the test here, since we've already sorted the points
        $this->updateBoundingBox($x0, $y0, $x1, $y1);

        $dx = $x1 - $x0;
        $dy = abs($y1 - $y0);

        $err = $dx / 2;

        if ($y0 < $y1)
        {
            $ystep = 1;
        } else
        {
            $ystep = -1;
        }

        for (; $x0<=$x1; $x0++)
        {
            if ($steep)
            {
                $this->my_setpixel($pcd, $y0, $x0, $color);
            }
            else
            {
                $this->my_setpixel($pcd, $x0, $y0, $color);
            }
            $err -= $dy;
            if ($err < 0)
            {
                $y0 += $ystep;
                $err += $dx;
            }
        }
    }

    // }}}
    // {{{ public function LCDfillrect()

    public function LCDfillrect(pcdstruct $pcd, $x, $y, $w, $h, $color)
    {
        for ($i=$x; $i<$x+$w; $i++)
        {
            for ($j=$y; $j<$y+$h; $j++)
            {
                $this->my_setpixel($pcd, $i, $j, $color);
            }
        }
        $this->updateBoundingBox($x, $y, $x+$w, $y+$h);
    }

    // }}}
    // {{{ public function LCDdrawrect()

    public function LCDdrawrect(pcdstruct $pcd, $x, $y, $w, $h, $color)
    {
        // stupidest version - just pixels - but fast with internal buffer!
        for ($i=$x; $i<$x+$w; $i++) {
            $this->my_setpixel($pcd, $i, $y, $color);
            $this->my_setpixel($pcd, $i, $y+$h-1, $color);
        }
        for ($i=$y; $i<$y+$h; $i++) {
            $this->my_setpixel($pcd, $x, $i, $color);
            $this->my_setpixel($pcd, $x+$w-1, $i, $color);
        }

        $this->updateBoundingBox($x, $y, $x+$w, $y+$h);
    }

    // }}}
    // {{{ public function LCDdrawcircle()

    public function LCDdrawcircle(pcdstruct $pcd, $x0, $y0, $r, $color)
    {
        $this->updateBoundingBox($x0-$r, $y0-$r, $x0+$r, $y0+$r);

        $f = 1 - $r;
        $ddF_x = 1;
        $ddF_y = -2 * $r;
        $x = 0;
        $y = $r;

        $this->my_setpixel($pcd, $x0, $y0+$r, $color);
        $this->my_setpixel($pcd, $x0, $y0-$r, $color);
        $this->my_setpixel($pcd, $x0+$r, $y0, $color);
        $this->my_setpixel($pcd, $x0-$r, $y0, $color);

        while ($x<$y)
        {
            if ($f >= 0)
            {
                $y--;
                $ddF_y += 2;
                $f += $ddF_y;
            }
            $x++;
            $ddF_x += 2;
            $f += $ddF_x;

            $this->my_setpixel($pcd, $x0 + $x, $y0 + $y, $color);
            $this->my_setpixel($pcd, $x0 - $x, $y0 + $y, $color);
            $this->my_setpixel($pcd, $x0 + $x, $y0 - $y, $color);
            $this->my_setpixel($pcd, $x0 - $x, $y0 - $y, $color);

            $this->my_setpixel($pcd, $x0 + $y, $y0 + $x, $color);
            $this->my_setpixel($pcd, $x0 - $y, $y0 + $x, $color);
            $this->my_setpixel($pcd, $x0 + $y, $y0 - $x, $color);
            $this->my_setpixel($pcd, $x0 - $y, $y0 - $x, $color);
        }
    }

    // }}}
    // {{{ public function LCDfillcircle()

    public function LCDfillcircle(pcdstruct $pcd, $x0, $y0, $r, $color)
    {
        $this->updateBoundingBox($x0-$r, $y0-$r, $x0+$r, $y0+$r);

        $f = 1 - $r;
        $ddF_x = 1;
        $ddF_y = -2 * $r;
        $x = 0;
        $y = $r;
        
        for ($i=$y0-$r; $i<=$y0+$r; $i++)
        {
            $this->my_setpixel($pcd, $x0, $i, $color);
        }

        while ($x<$y)
        {
            if ($f >= 0)
            {
                $y--;
                $ddF_y += 2;
                $f += $ddF_y;
            }
            $x++;
            $ddF_x += 2;
            $f += $ddF_x;

            for ($i=$y0-$y; $i<=$y0+$y; $i++)
            {
                $this->my_setpixel($pcd, $x0+$x, $i, $color);
                $this->my_setpixel($pcd, $x0-$x, $i, $color);
            }
            for ($i=$y0-$x; $i<=$y0+$x; $i++)
            {
                $this->my_setpixel($pcd, $x0+$y, $i, $color);
                $this->my_setpixel($pcd, $x0-$y, $i, $color);
            }
        }
    }

    // }}}
    // {{{ public function LCDsetPixel()

    // the most basic function, set a single pixel
    public function LCDsetPixel(pcdstruct $pcd, $x, $y, $color)
    {
        if (($x >= LCDWIDTH) || ($y >= LCDHEIGHT))
            return;

        // x is which column
        if ($color)
            $pcd->pcd8544_buffer[$x+ intval($y/8)*LCDWIDTH] |= $this->_bv($y%8);
        else
            $pcd->pcd8544_buffer[$x+ intval($y/8)*LCDWIDTH] &= ~$this->_bv($y%8);
        $this->updateBoundingBox($x, $y, $x, $y);
    }

    // }}}
    // {{{ public function LCDgetPixel()

    // the most basic function, get a single pixel 
    public function LCDgetPixel(pcdstruct $pcd, $x, $y)
    {
        if (($x >= LCDWIDTH) || ($y >= LCDHEIGHT))
            return 0;

        return ($pcd->pcd8544_buffer[$x+ intval($y/8)*LCDWIDTH] >> (7-($y%8))) & 0x1;
    }

    // }}}
    // {{{ public function LCDspiwrite()

    public function LCDspiwrite(pcdstruct $pcd, $c)
    {
        digitalWrite($pcd->_cs, LOW);
        $this->shiftOut($pcd->_din, $pcd->_sclk, MSBFIRST, $c);
        digitalWrite($pcd->_cs, HIGH);
    }

    // }}}
    // {{{ public function LCDcommand()

    public function LCDcommand(pcdstruct $pcd, $c)
    {
        digitalWrite($pcd->_dc, LOW);
        $this->LCDspiwrite($pcd, $c);
    }

    // }}}
    // {{{ public function LCDdata()

    public function LCDdata(pcdstruct $pcd, $c)
    {
        digitalWrite($pcd->_dc, HIGH);
        $this->LCDspiwrite($pcd, $c);
    }

    // }}}
    // {{{ public function LCDsetContrast()

    public function LCDsetContrast(pcdstruct $pcd, $val)
    {
        if ($val > 0x7f) {
            $val = 0x7f;
        }
        $this->LCDcommand($pcd, PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION );
        $this->LCDcommand($pcd, PCD8544_SETVOP | $val);
        $this->LCDcommand($pcd, PCD8544_FUNCTIONSET);
    }

    // }}}
    // {{{ public function LCDdisplay()

    public function LCDdisplay(pcdstruct $pcd)
    {

        for($p=0; $p<6; $p++)
        {
            if (defined('enablePartialUpdate')) {
                // check if this page is part of update
                if (self::$yUpdateMin >= (($p+1)*8) )
                {
                    continue;   // nope, skip it!
                }
                if (self::$yUpdateMax < $p*8)
                {
                    break;
                }
            }

            $this->LCDcommand($pcd,PCD8544_SETYADDR | $p);


            if (defined('enablePartialUpdate')) {
                $col = self::$xUpdateMin;
                $maxcol = self::$xUpdateMax;
            } else {
                // start at the beginning of the row
                $col = 0;
                $maxcol = LCDWIDTH-1;
            }

            $this->LCDcommand($pcd, PCD8544_SETXADDR | $col);

            for(; $col<=$maxcol; $col++) {
                //uart_putw_dec(col);
                //uart_putchar(' ');
                $this->LCDdata($pcd, $pcd->pcd8544_buffer[(LCDWIDTH*$p)+$col]);
            }
        }

        $this->LCDcommand($pcd, PCD8544_SETYADDR);  // no idea why this is necessary but it is to finish the last byte?
        if (defined('enablePartialUpdate')) {
            self::$xUpdateMin = LCDWIDTH - 1;
            self::$xUpdateMax = 0;
            self::$yUpdateMin = LCDHEIGHT-1;
            self::$yUpdateMax = 0;
        }

    }

    // }}}
    // {{{ public function LCDclear()

    // clear everything
    public function LCDclear(pcdstruct $pcd)
    {
        //memset(pcd8544_buffer, 0, LCDWIDTH*LCDHEIGHT/8);
        //this should probably be a memset AW
        for ($i=0; $i<LCDWIDTH*LCDHEIGHT/8; $i++)
            $pcd->pcd8544_buffer[$i] = 0;
        $this->updateBoundingBox(0, 0, LCDWIDTH-1, LCDHEIGHT-1);
        $pcd->cursor_y = $pcd->cursor_x = 0;
    }

    // }}}
    // {{{ public function LCDFree()

    public function LCDFree(pcdstruct $pcd)
    {
        if($pcd->pcd8544_buffer != NULL)
            $pcd->pcd8544_buffer = null;
        if($pcd != NULL)
            $pcd = null;
    }

    // }}}
    // {{{ public function shiftOut()

    public function shiftOut($dataPin, $clockPin, $bitOrder, $val)
    {
        for ($i=0; $i<8; $i++)  {
            if ($bitOrder == LSBFIRST)
                digitalWrite($dataPin, !!($val & (1 << $i)));
            else
                digitalWrite($dataPin, !!($val & (1 << (7 - $i))));

            digitalWrite($clockPin, HIGH);
            for ($j=CLKCONST_2; $j>0; $j--); // clock speed, anyone? (LCD Max CLK input: 4MHz)
            digitalWrite($clockPin, LOW);
        }
    }

    // }}}
    // {{{ public function _delay_ms()

    public function _delay_ms($t)
    {
        $nCount = 0;
        while ($t != 0)
        {
            $nCount = CLKCONST_1;
            while($nCount != 0)
                $nCount--;
            $t--;
        }
    }

    // }}}

    // }}} functions end
}

